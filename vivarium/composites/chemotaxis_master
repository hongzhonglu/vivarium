from __future__ import absolute_import, division, print_function

import os

from vivarium.compartment.process import initialize_state
from vivarium.compartment.composition import (
    load_compartment,
    get_derivers,
    simulate_with_environment,
    plot_simulation_output,
    plot_compartment_topology)
from vivarium.composites.gene_expression import plot_gene_expression_output
from vivarium.composites.flagella_expression import get_flagella_expression_config

# processes
from vivarium.processes.division import (
    Division,
    divide_condition
)
from vivarium.processes.metabolism import (
    Metabolism,
    get_iAF1260b_config
)
from vivarium.processes.convenience_kinetics import (
    ConvenienceKinetics,
    get_glc_lct_config
)
from vivarium.processes.transcription import Transcription
from vivarium.processes.translation import Translation
from vivarium.processes.degradation import RnaDegradation
from vivarium.processes.complexation import Complexation
from vivarium.processes.Endres2006_chemoreceptor import ReceptorCluster
from vivarium.processes.Mears2014_flagella_activity import FlagellaActivity
from vivarium.processes.membrane_potential import MembranePotential


# the composite function
def compose_chemotaxis_master(config):
    """
    A composite with kinetic transport, metabolism, and gene expression
    """

    ## Declare the processes.
    # Transport
    # load the kinetic parameters
    transport_config = config.get('transport', get_glc_lct_config())
    transport = ConvenienceKinetics(transport_config)
    target_fluxes = transport.kinetic_rate_laws.reaction_ids

    # Metabolism
    # get target fluxes from transport
    # load regulation function
    metabolism_config = config.get('metabolism', get_iAF1260b_config())
    metabolism_config.update({'constrained_reaction_ids': target_fluxes})
    metabolism = Metabolism(metabolism_config)

    # flagella expression
    flg_expression_config = get_flagella_expression_config({})
    transcription = Transcription(flg_expression_config['transcription'])
    translation = Translation(flg_expression_config['translation'])
    degradation = RnaDegradation(flg_expression_config['degradation'])
    complexation = Complexation(flg_expression_config['complexation'])

    # chemotaxis -- flagella activity, receptor activity, and PMF
    receptor_parameters = {'ligand': 'GLC'}
    receptor_parameters.update(config)
    receptor = ReceptorCluster(config.get('receptor', receptor_parameters))
    flagella = FlagellaActivity(config.get('flagella', {}))
    PMF = MembranePotential(config.get('PMF', {}))

    # Division
    # get initial volume from metabolism
    division_config = config.get('division', {})
    division_config.update({'initial_state': metabolism.initial_state})
    division = Division(division_config)

    # Place processes in layers
    processes = [
        {
        'PMF': PMF
        },

        {
        'receptor': receptor,
        'transport': transport,
        },

        {
        'transcription': transcription,
        'translation': translation,
        'degradation': degradation,
        'complexation': complexation,
        'metabolism': metabolism
        },

        {
        'flagella': flagella
        },

        {
        'division': division
        }
    ]

    # Make the topology
    # for each process, map process ports to store ids
    topology = {
        'transport': {
            'internal': 'internal',
            'external': 'environment',
            'exchange': 'null',  # metabolism's exchange is used
            'fluxes': 'flux_bounds',
            'global': 'global'},

        'metabolism': {
            'internal': 'internal',
            'external': 'environment',
            'reactions': 'reactions',
            'exchange': 'exchange',
            'flux_bounds': 'flux_bounds',
            'global': 'global'},

        'transcription': {
            'chromosome': 'chromosome',
            'molecules': 'internal',
            'proteins': 'proteins',
            'transcripts': 'transcripts',
            'factors': 'concentrations'},

        'translation': {
            'ribosomes': 'ribosomes',
            'molecules': 'internal',
            'transcripts': 'transcripts',
            'proteins': 'proteins',
            'concentrations': 'concentrations'},

        'degradation': {
            'transcripts': 'transcripts',
            'proteins': 'proteins',
            'molecules': 'internal',
            'global': 'global'},

        'complexation': {
            'monomers': 'proteins',
            'complexes': 'proteins'},

        'receptor': {
            'external': 'environment',
            'internal': 'internal'},

        'flagella': {
            'internal': 'internal',
            'membrane': 'membrane',
            'flagella_counts': 'proteins',
            'flagella_activity': 'flagella_activity',
            'external': 'environment'},

        'PMF': {
            'external': 'environment',
            'membrane': 'membrane',
            'internal': 'internal'},

        'division': {
            'global': 'global'}
    }

    # add derivers
    derivers = get_derivers(processes, topology)
    deriver_processes = derivers['deriver_processes']
    all_processes = processes + derivers['deriver_processes']
    topology.update(derivers['deriver_topology'])

    # initialize the states
    initial_state = {
        'internal': {'flagella': 8}}
    states = initialize_state(
        all_processes,
        topology,
        config.get('initial_state', initial_state))

    options = {
        'name': config.get('name', 'chemotaxis_master'),
        'environment_port': 'environment',
        # 'exchange_port': 'exchange',
        'topology': topology,
        'initial_time': config.get('initial_time', 0.0),
        'divide_condition': divide_condition}

    return {
        'processes': processes,
        'derivers': deriver_processes,
        'states': states,
        'options': options}




if __name__ == '__main__':
    out_dir = os.path.join('out', 'tests', 'chemotaxis_master')
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    compartment = load_compartment(compose_chemotaxis_master)
    options = compartment.configuration

    # save the topology network
    settings = {'show_ports': True}
    plot_compartment_topology(
        compartment,
        settings,
        out_dir)

    # simulate
    timeline = [(10, {})] # 2520 sec (42 min) is the expected doubling time in minimal media
    settings = {
        'environment_port': options.get('environment_port'),
        'exchange_port': options.get('exchange_port'),
        'environment_volume': 1e-13,  # L
        'timeline': timeline}

    timeseries = simulate_with_environment(compartment, settings)

    # print growth
    volume_ts = timeseries['global']['volume']
    print('growth: {}'.format(volume_ts[-1]/volume_ts[0]))

    # plots
    plot_settings = {
        'max_rows': 60,
        'remove_zeros': True,
        'overlay': {'reactions': 'flux_bounds'},
        'skip_ports': ['prior_state', 'null']}
    plot_simulation_output(timeseries, plot_settings, out_dir)

    gene_exp_plot_config = {
        'name': 'flagella_expression',
        'ports': {
            'transcripts': 'transcripts',
            'proteins': 'proteins',
            'molecules': 'internal'}}
    plot_gene_expression_output(
        timeseries,
        gene_exp_plot_config,
        out_dir)
